# drive-telesope keeps the pulsar telesope tracking the Crab
#
import urllib, ephem, time, math, EasyDialogs

bar = EasyDialogs.ProgressBar()
# for debugging offline, it's useful to display commands rather than
#send them to the device, so define:
connection = False

#base address of the Netiom device.  This can be changed using the null modem
#cable connected to the card, with the jumper in.
url = 'http://192.168.0.6/'

west_stop = 175 # west software stop
east_stop = -175 #east software stop

##############
def sendstr(stringlist):
    # send the string command s to the contoller.  stringlist is a list of commands
    # so could be somethingi like ['T00'] or ['A01','A02','A09'].
    for s in stringlist:
        if connection:
            try:
                f = urllib.urlopen(url+'?'+s)
                f.close()
            except IOError:
                print 'I/O error opening web page to send command to controller'
        else:
            print(url+'?'+s)
    return
##############
def enable_drive():
    # enable the output of the servo controller.  The telescope will start
    # driving if a non-zero speed has been set (see set_speed)
    sendstr(['A09']) #set pin 9 high
    return
##############
def disable_drive():
    # disable the output of the servo controller.  The telescope will stop
    # driving. Alway disable the drive when not intending to drive to prevent
    # creep and to remove any residual current in the motor.
    sendstr(['B09']) #set pin 9 low
    return
##############
def set_speed(v):
    # setup the controller to drive the telescope at a speed v ( any value -1 to 1).
    # A speed of 1 drives clockwise (ahead) at the maximum rate, -0.5 drives
    # backwards at half speed etc... The telescope will only start driving once
    # enable_drive is set.  The speed is set by the 8-bit DAC outout voltage.
    speed = int((1.0-v)/2.0*255) # put in the range 0-255
    vlist = []
    for i in range(7,-1,-1):
        if speed & 2**i:
             vlist.append('B0'+str(i+1))
        else:
            vlist.append('A0'+str(i+1))
    # disable DAC inputs (pin 10 is connected to WR on the DAC. When this input
    # is low, data is read.  When high the analogue voltage is fixed.)
    sendstr(['B10'])
    sendstr(vlist)
    sendstr(['A10','B10']) # enable/disable DAC inputs
    return
###############
def read_position():
    # The Netiom card serves files uploaded to it using the serial interface.
    # If the filename extension is ".cgi", then %xx strings are replaced with
    # values.  The encoder uses gray codes, indexed by graycode.txt
    try:
        g = urllib.urlopen(url+'digitalinputs.cgi')
        status_str = g.readline()
        g.close()
    except IOError:
        print 'I/O error reading the encoder'
        status_str = '0000000000000'
    # bugger! The netiom reports the lowest bit (bit 1) first, so we have to
    # reverse the string
    s2=''
    for i in range(0,13):
        s2 += status_str[12-i]
    # now turn it into a graycode base 10 integer
    gray = int(s2, base=2)
    # ... and find the content of this element in grayindex (removing the
    # trailing ".0\n".  Also, convert to degrees
    position = grayindex[gray][:-3]
    pos_degree = int(position)*360.0/8192.0
    if pos_degree >180.0:
        pos_degree -= 360.0
    return pos_degree
####################
def motor():
# reports on whether the motor is running
    try:
        g = urllib.urlopen(url+'digitaloutputs.cgi')
        status_str = g.readline()
        status_str = g.readline()
        g.close()
    except IOError:
        print 'I/O error reading digitalinputs.cgi to find motor status'
        status_str = '0000000000'
    if status_str[0]=='1':
        status = 'on'
    else:
        status='off'
    return status
################################################################################
# read in the graycode lookup table.  This was generated by graycode.py
graycodefile = open('graycode.txt', 'r')
grayindex = graycodefile.readlines()
graycodefile.close()

# set up the crab ephemeris
Acre_Road = ephem.Observer()
Acre_Road.long, Acre_Road.lat, Acre_Road.elev = "-4:18:25.93", "55:54:8.29",50
Acre_Road.pressure = 0 #remove refraction
crab = ephem.readdb("Crab pulsar,f|L,05:34:31.97,22:0:52.1,0,2000") #set up the target

# slew to the Crab
speed = 0.0
set_speed(speed)
enable_drive()


while True:
    t_start = time.gmtime()[5]
    Acre_Road.date = ephem.now()
    crab.compute(Acre_Road) # compute its position at present epoch
    hh = (Acre_Road.sidereal_time() - crab.ra)/math.pi*180.0 # calculate the current hh=lst-ra

    print ephem.now().tuple()
    try:
        bar.title('Crab pulsar tracker: '+str(time.ctime()))
        bar.label("hh %.2f" %  (hh))
        bar.set(5, 17)
    except KeyboardInterrupt:
        break
    time.sleep(0.5)
disable_drive()




